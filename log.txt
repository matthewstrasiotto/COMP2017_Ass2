==10106== Memcheck, a memory error detector
==10106== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==10106== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==10106== Command: ./csv.out
==10106== 
T:0|File:    parse_csv.c|Ln: 12|Fn:      buffer_in_file|I|Buffering in file: python/TEST_OUT/HEADER.csv
T:0|File:    parse_csv.c|Ln: 25|Fn:      buffer_in_file|I|File size: 25
T:0|File:    parse_csv.c|Ln: 34|Fn:      buffer_in_file|I|Number of bytes read: 25
T:0|File:   test_parse.c|Ln: 11|Fn:                main|I|Buffered in header of size 25
T:0|File:   test_parse.c|Ln: 16|Fn:                main|I|In initialized header info, discerned 12 users, 10 posts
==10106== 
==10106== HEAP SUMMARY:
==10106==     in use at exit: 1,376 bytes in 6 blocks
==10106==   total heap usage: 9 allocs, 3 frees, 6,049 bytes allocated
==10106== 
==10106== 1,376 (128 direct, 1,248 indirect) bytes in 1 blocks are definitely lost in loss record 6 of 6
==10106==    at 0x4C31B25: calloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==10106==    by 0x108F23: init_env (parse_csv.c:58)
==10106==    by 0x108E2F: init_from_header (parse_csv.c:43)
==10106==    by 0x1095E3: main (test_parse.c:13)
==10106== 
==10106== LEAK SUMMARY:
==10106==    definitely lost: 128 bytes in 1 blocks
==10106==    indirectly lost: 1,248 bytes in 5 blocks
==10106==      possibly lost: 0 bytes in 0 blocks
==10106==    still reachable: 0 bytes in 0 blocks
==10106==         suppressed: 0 bytes in 0 blocks
==10106== 
==10106== For counts of detected and suppressed errors, rerun with: -v
==10106== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
